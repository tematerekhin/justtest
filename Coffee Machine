package machine
class Coffeemachine {
    enum class Status(val number: Int, val text: String) {
        ChooseAction(1, "Write action (buy, fill, take, remaining, exit):"),
        ChooseCoffee(2, "What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:"),
    }

    var currentStatus: Int = 1
    private var water: Int = 400
    private var milk: Int = 540
    private var beans: Int = 120
    private var cash: Int = 550
    private var cups: Int = 9
    private fun makeEspresso() {
        if (water <= 250) {
            println("Sorry, not enough water!")
        } else if (beans <= 16) {
            println("Sorry, not enough beans!")
        } else if (cups <= 0) {
            println("Sorry, not enough cups!")
        } else {
            water -= 250
            beans -= 16
            cash += 4
            cups -= 1
            println("I have enough resources, making you a coffee!")
        }
        currentStatus = Status.ChooseAction.number
        println(Status.ChooseAction.text)
    }

    private fun makeLatte() {
        if (water <= 350) {
            println("Sorry, not enough water!")
        } else if (milk <= 75) {
            println("Sorry, not enough milk!")
        } else if (beans <= 20) {
            println("Sorry, not enough beans!")
        } else if (cups <= 0) {
            println("Sorry, not enough cups!")
        } else {
            water -= 350
            milk -= 75
            beans -= 20
            cash += 7
            cups -= 1
            println("I have enough resources, making you a coffee!")
        }
        currentStatus = Status.ChooseAction.number
        println(Status.ChooseAction.text)
    }

    private fun makeCappuccino() {
        if (water <= 200) {
            println("Sorry, not enough water!")
        } else if (milk <= 100) {
            println("Sorry, not enough milk!")
        } else if (beans <= 12) {
            println("Sorry, not enough beans!")
        } else if (cups <= 0) {
            println("Sorry, not enough cups!")
        } else {
            water -= 200
            milk -= 100
            beans -= 12
            cash += 6
            cups -= 1
            println("I have enough resources, making you a coffee!")
        }
        currentStatus = Status.ChooseAction.number
        println(Status.ChooseAction.text)
    }

    private fun remaining() {
        println("The coffee machine has:")
        println("$water ml of water")
        println("$milk ml of milk")
        println("$beans g of coffee beans")
        println("$cups disposable cups")
        println("$$cash of money")
        currentStatus = Status.ChooseAction.number
        println(Status.ChooseAction.text)
    }

    private fun takeMoney() {
        println("I gave you $$cash")
        cash = 0
    }

    private fun fillMachine() {
        println("Write how many ml of water you want to add:")
        water += readln().toInt()
        println("Write how many ml of milk you want to add:")
        milk += readln().toInt()
        println("Write how many grams of coffee beans you want to add:")
        beans += readln().toInt()
        println("Write how many disposable cups you want to add:")
        cups += readln().toInt()
    }

    private fun back() {
        currentStatus = Status.ChooseAction.number
        println(Status.ChooseAction.text)
    }

    fun method(action: String) {
        //this.currentStatus = Status.ChooseAction.number
        //while (action != "exit") {
        if (currentStatus == 1) {
            when (action) {
                "fill" -> fillMachine()
                "take" -> takeMoney()
                "remaining" -> remaining()
            }
        } else {
            when (action) {
                "1" -> makeEspresso()
                "2" -> makeLatte()
                "3" -> makeCappuccino()
                "back" -> back()
            }
            }
        }
    }
fun main() {
    val machine1 = Coffeemachine()
    println(Coffeemachine.Status.ChooseAction.text)
    do {

        val act = readln()
        if (act != "buy") {
            machine1.method(act)
        } else {
            machine1.currentStatus = Coffeemachine.Status.ChooseCoffee.number
            println(Coffeemachine.Status.ChooseCoffee.text)
            machine1.method(act)
        }
    } while (act != "exit")
}
